import Link from "next/link";
import { BlogPage } from "../../../components/blog/blog-page";
import { BlogParagraph } from "../../../components/blog/blog-paragraph";
import { BlogSubtitle } from "../../../components/blog/blog-subtitle";
import { BlogResume } from "../../../components/blog/blog-resume";
import { BlogTitle } from "../../../components/blog/blog-title";
import { CodeSnippet } from '../../../components/code-snippet'

export const metadata = {
  title: "Dica: Fa√ßa o bind em m√©todos de classes ao usar invers√£o de controle",
  lang: "üáßüá∑",
  resume: `
    Nunca esque√ßa de anexar o escopo da classe ao passar o controle para um executor externo. Para isso use o m√©todo bind ou arrow functions.`,
  href: "/blog/pt-br/tip-js-class-bind",
};

const snippetWrong = `// example1.js

class Observer {
  subscribe(cb) {
    setTimeout(cb, 1000)
  }
}

class Chat {
  constructor(observer) {
    this._observer = observer
  }

  start() {
    this._observer.subscribe(this.handleMessage)
  }

  handleMessage(message) {
    this.print(message)
  }

  print(receivedMessageText) {
    console.log('> ' + receivedMessageText)
  }
}

const chat = new Chat(new Observer()).start()
`

const snippetLogTimerContext = `// example2.js

class Observer {
  subscribe(cb) {
    setTimeout(cb, 1000)
  }
}

class Chat {
  constructor(observer) {
    this._observer = observer
  }

  start() {
    this._observer.subscribe(this.handleMessage)
  }

  handleMessage(message) {
    console.log(this)
    this.print(message)
  }

  print(receivedMessageText) {
    console.log('> ' + receivedMessageText)
  }
}

const chat = new Chat(new Observer()).start()`

const snippetRight = `// example3.js


`

export default function Post() {
  return (
    <BlogPage
      title={metadata.title}
      // imgPath="/images/blog/js-class-tip-bind/image.jpg"
      // imgAlt="Blog landing image"
      // imgAuthorName="Hello I'm Nik"
      // imgAuthorHref="https://unsplash.com/@helloimnik?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText"
    >
      <BlogTitle>{metadata.title}</BlogTitle>
      <BlogResume>{metadata.resume}</BlogResume>

      <BlogSubtitle>Vamos encarar o problema</BlogSubtitle>

      <BlogParagraph>
        N√≥s temos uma classe chamada <code>Chat</code> que escuta por mensagens entregues por uma depend√™ncia chamada <code>observer</code>. O trabalho da classe <code>Chat</code> √©, sempre que receber uma mensagem, mostrar ela no console.
      </BlogParagraph>
      
      <BlogParagraph>
        Uma solu√ß√£o simples pra esse problema √© a seguinte:
      </BlogParagraph>

      <CodeSnippet>
        {snippetWrong}
      </CodeSnippet>


      <BlogParagraph>
        Mas d√™ uma olhada na linha 15, voc√™ consegue identificar algum problema?
      </BlogParagraph>

      <BlogParagraph>
        Essa forma de design de c√≥digo √© muito comum, √© o que chamamos de invers√£o de controle. Basicamente deixamos que o m√©todo <code>.subscribe</code> execute o m√©todo <code>Chat#handleMessage</code> quando bem entender.
      </BlogParagraph>

      <BlogParagraph>
        Entretanto, da forma que o c√≥digo est√° escrito, temos um problema de delay de cria√ß√£o de escopo. Classes em JavaScript s√£o nada mais que um <i>syntax sugar</i> em cima do mecanismo de prot√≥tipos.
      </BlogParagraph>

      <BlogParagraph>
      O que isso significa? Sempre que uma classe √© definida em JavaScript, cada m√©todo dessa classe √© encarado com uma fun√ß√£o usando a sintaxe cl√°ssica de fun√ß√µes (usando a palavra chave <code>function</code>). √â dessa forma que temos acesso ao <code>this</code> dentro de cada m√©todo.
      </BlogParagraph>

      <BlogParagraph>
        
      O problema √© que engines que executam JavaScript n√£o criam o contexto de execu√ß√£o dessas fun√ß√µes at√© que a fun√ß√£o seja executada. Executando o c√≥digo acima no node temos o seguinte erro:
      </BlogParagraph>

      <code>
$ node example1.js

    this.print(message)
         ^

TypeError: this.print is not a function
      </code>

      <BlogParagraph>
       Note que existe um objeto <code>this</code> no contexto da execu√ß√£o, por√©m o m√©todo <code>print</code> n√£o existe no <code>this</code>. Isso acontece porque o contexto anexado ao callback executado √© o contexto do <code>setTimeout</code>.
      </BlogParagraph>

      <BlogSubtitle>WTF??</BlogSubtitle>

      <BlogParagraph>
        Por mais estranho que pare√ßa, n√≥s conseguimos acesso ao contexto de quem est√° chamando o m√©todo <code>Chat#handleMessage</code>. Veja no exemplo abaixo que foi adicionado um log no console antes de chamar o m√©todo <code>.print</code> para mostrar o objeto this.
      </BlogParagraph>

      <CodeSnippet>
        {snippetLogTimerContext}
      </CodeSnippet>

      <BlogParagraph>
        Executando o c√≥digo novamente, veja que interessante:
      </BlogParagraph>

      <CodeSnippet showLineNumbers={false}>
        {`
node example1.js

>> 1000

    this.print(message)
         ^

TypeError: this.print is not a function
`}
      </CodeSnippet>

      <BlogParagraph>
        O que aconteceu √© que, o contexto de execu√ß√£o do m√©todo <code>Chat#handleMessage</code> s√≥ √© criado quando o callback <code>cb</code> √© executado. Nesse caso, o contexto anexado ao callback √© o contexto do timer, dessa forma temos acesso ao <code>this</code> do <code>setTimeout</code> dentro do m√©todo <code>Chat#handleMessage</code>!
      </BlogParagraph>

      <BlogParagraph>
        E isso √© bom? N√£o! √â terrivelmente ruim. Por√©m √© o comportamento do JavaScript. Esse comportamento esquisito deveria nos afastar da linguagem? Particularmente eu acredito que n√£o. JavaScript √© uma linguagem incr√≠vel com alguns defeitos que n√£o podem ser concertados.
      </BlogParagraph>

      <BlogSubtitle>
        Corrigindo o problema
      </BlogSubtitle>

      <BlogParagraph>
        Existem algumas formas bem simples de corrigir o problema encontrado. Uma delas √© fazer o que todo esse texto se prop√µe a explicar: usar o m√©todo <code>bind</code>.
      </BlogParagraph>

      <BlogParagraph>
        Quando √© feito o <code>bind</code> de uma fun√ß√£o com um determinado objeto, este objeto √© usado como o valor do this dessa fun√ß√£o quando a fun√ß√£o for executada. Em outras palavras, n√≥s conseguimos anexar o contexto da classe na qual o m√©todo est√° definido e, quando esse m√©todo for executado pelo controle externo, a fun√ß√£o vai encontrar todos os atributos e outros m√©todos da classe anexados ao <code>this</code>.
      </BlogParagraph>

      <BlogParagraph>
        Executando o programa <i>example3.js</i> temos a seguinte sa√≠da, que √© o que de fato est√°vamos esperando:
      </BlogParagraph>


      <CodeSnippet showLineNumbers={false}>
        {`
$ deno run public/code/blog/tip-js-class-bind/example3.js 
> Hello you!
`}
      </CodeSnippet>      
    </BlogPage>  
  );
}
