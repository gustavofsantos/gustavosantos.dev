import Link from 'next/link'
import { BlogPage } from '../../../components/blog/blog-page'
import { BlogParagraph } from '../../../components/blog/blog-paragraph'
import { BlogSubtitle } from '../../../components/blog/blog-subtitle'
import { BlogResume } from '../../../components/blog/blog-resume'
import { BlogTitle } from '../../../components/blog/blog-title'
import { CodeSnippet } from '../../../components/code-snippet'

export const metadata = {
  title: 'O mÃ­nimo de git que vocÃª precisa saber para trabalhar com confianÃ§a',
  lang: 'ğŸ‡§ğŸ‡·',
  resume: `Vai trabalhar em uma funcionalidade nova? git checkout -b feature/*. Fez cagada? git reset`,
  href: '/blog/pt-br/minimum-git-productive'
}

export default function Post() {
  return (
    <BlogPage title={metadata.title}>
      <BlogTitle>{metadata.title}</BlogTitle>
      <BlogResume>{metadata.resume}</BlogResume>
      <BlogSubtitle>O meu maior defeito</BlogSubtitle>
      <BlogParagraph>
        Eu tenho falhas em muitos aspectos, mas tem uma coisa que acaba
        inclusive me prejudicando profissionalmente: falha na memÃ³ria. SÃ©rio, a
        minha capacidade de reter informaÃ§Ã£o Ã© pÃ©ssima, pode ser comparada com a
        capacidade que um passarinho tem pra lembrar quem foi o humano que deu
        alpiste.
      </BlogParagraph>
      Provavelmente vocÃª nÃ£o percebeu ainda, atÃ© porque nÃ³s nÃ£o nos conhecemos,
      porÃ©m eu crio diversas armadilhas pra eu mesmo cair quando tiver prestes a
      fazer cagada. Nesse texto vou compartilhar algumas coisas que vocÃª tambÃ©m
      pode fazer e ainda melhorar suas skills com git.
      <BlogSubtitle>Memorize somente o necessÃ¡rio</BlogSubtitle>
      Memorizar sÃ³ o necessÃ¡rio para fazer o trabalho com um certo nÃ­vel de
      descencia Ã© essencial. VocÃª nÃ£o vai memorizar tudo que o git faz, nem
      deveria fazer isso. VocÃª deveria encarar vocÃª mesmo como aquela classe que
      estÃ¡ precisando de uma refatoraÃ§Ã£o, mas vocÃª somente refatora o necessÃ¡rio
      para concluir o trabalho. Melhoria constante deveria ser seu mantra. VocÃª
      Ã© como uma base de cÃ³digo que estÃ¡ constantemente recebendo melhorias,
      refatoraÃ§Ãµes, testes e eventualmente alguns bugs. Ã‰, vocÃª Ã© a melhor
      pessoa que existe pra te levar a dar um tiro no pÃ©. Portanto vamos comeÃ§ar
      com o bÃ¡sico: <b>git checkout -b feature/XXX</b>
      NÃ£o faÃ§a commits na master em seu emprego. Se sua equipe trabalha com trÃªs
      ambientes, assim como a minha, vocÃª provavelmente tem um ambiente de
      testes, que Ã© usado pra quebrar o sistema. Quebrar o sistema Ã© importante,
      quebrar o sistema como se fosse em produÃ§Ã£o Ã© ainda mais importante. Sua
      equipe deveria ter um ambiente de produÃ§Ã£o pronto para os desenvolvedores
      quebrar. Aqui vai o primeiro conselho: nunca misture esse ambiente com o
      seu branch de trabalho.
    </BlogPage>
  )
}
