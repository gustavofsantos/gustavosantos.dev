import { BlogPage } from '../../components/blog/blog-page'
import { BlogParagraph } from '../../components/blog/blog-paragraph'
import { BlogSubtitle } from '../../components/blog/blog-subtitle'
import { BlogResume } from '../../components/blog/blog-resume'
import { BlogTitle } from '../../components/blog/blog-title'
import { CodeSnippet } from '../../components/code-snippet'
import { OuterLink } from '../../components/outer-link'

export const metadata = {
  title: 'Testando servidores REST em Node com confian√ßa',
  lang: 'üáßüá∑',
  resume: `Antes de colocar qualquer tipo de software em produ√ß√£o voc√™ precisa
 estar confiante com seus testes. Voc√™ est√° confiante? Voc√™ faz mock de banco de dados?
 Se sim, provavelemnte esse texto vai te ajudar muito!`,
  href: '/blog/node-mongo-setup-tests'
}

export default function Post() {
  return (
    <BlogPage title={metadata.title}>
      <BlogTitle>{metadata.title}</BlogTitle>
      <BlogResume>{metadata.resume}</BlogResume>

      <BlogParagraph>
        Vamos aprender como configurar o Jest, Mongo e Fastify em um projeto
        pequeno o suficiente para que seja poss√≠vel discutirmos sobre assuntos
        mais direcionados, como automa√ß√µes e testes com garantias de que voc√™
        est√° reproduzindo o ambiente de produ√ß√£o durante os seus testes!
      </BlogParagraph>

      <BlogParagraph>
        O projeto envolve um servidor simples com uma rota que lista os usu√°rios
        salvos no banco, mas partindo desse projeto t√£o simples, vamos
        configurar seeders e fixtures para popularmos o banco automaticamente,
        tamb√©m vamos resolver alguns problemas associados com conex√µes no banco
        de dados.
      </BlogParagraph>

      <BlogSubtitle>Preparando o projeto</BlogSubtitle>

      <BlogParagraph>
        Vamos come√ßar criando um diret√≥rio chamado{' '}
        <code>node-mongo-testing</code>:
      </BlogParagraph>

      <CodeSnippet showLineNumbers={false} wrapLines>
        {`$ mkdir node-mongo-testing`}
      </CodeSnippet>

      <BlogParagraph>
        Agora entre nesse diret√≥rio e inicialize um projeto com o npm (ou yarn
        -- nesse tutorial vou usar o npm):
      </BlogParagraph>

      <CodeSnippet showLineNumbers={false} wrapLines>
        {`$ cd node-mongo-testing
$ npm init -y`}
      </CodeSnippet>

      <BlogParagraph>
        √â boa pr√°tica inicializar o git nesse diret√≥rio e criar o primeiro
        commit, vou descrever esse passo agora, mas outros passos que envolvem
        commits e cria√ß√£o de branches vou deixar para voc√™, caro leitor, decidir
        quando proceder.
      </BlogParagraph>

      <CodeSnippet showLineNumbers={false} wrapLines>
        {`$ git init 
$ touch .gitignore 
$ git add . 
$ git commit -m "project created"`}
      </CodeSnippet>

      <BlogParagraph>
        Agora podemos come√ßar instalando as depend√™ncias base, que √© s√≥ o driver
        nativo do Mongo. N√£o vou usar o Mongoose aqui porque particularmente
        gosto muito de trabalhar com o driver nativo do Mongo. Al√©m disso,
        entendo que se voc√™ n√£o tem muito conhecimento em Mongo, lidar com o
        driver nativo vai te deixar mais pr√≥ximo de entender como esse banco de
        dados funciona.
      </BlogParagraph>

      <BlogParagraph>Vamos adicionar o mongo como depend√™ncia:</BlogParagraph>

      <CodeSnippet showLineNumbers={false}>$ npm i mongodb</CodeSnippet>

      <BlogParagraph>
        N√£o esque√ßa de adicionar o diret√≥rio <code>node_modules</code> ao
        arquivo
        <code>.gitignore</code>. Adicione todos os arquivos no staging do git e
        fa√ßa um commit. Exemplo:
      </BlogParagraph>

      <CodeSnippet showLineNumbers={false} wrapLines>
        {`$ git add .
$ git commit -m "added mongodb as dependency"`}
      </CodeSnippet>

      <BlogParagraph>
        Agora estamos prontos para come√ßar a sujar as m√£os!
      </BlogParagraph>

      <BlogSubtitle>Estruturando o projeto</BlogSubtitle>

      <BlogParagraph>
        Vamos criar uma API REST simples que vai listar os usu√°rios no banco de
        dados. Para isso vou adicionar o Fastify como depend√™ncia s√≥ para esse
        n√£o ser qualquer outro tutorial de Node com Express:
      </BlogParagraph>

      <CodeSnippet showLineNumbers={false} wrapLines>
        {`$ npm i fastify`}
      </CodeSnippet>

      <BlogParagraph>
        Novamente, vou criar um novo commit com essa depend√™ncia. Aqui vale uma
        dica, sempre que voc√™ causar alguma mudan√ßa no seu projeto, fa√ßa um
        commit logo ap√≥s para que o processo de voltar ao estado anterior seja
        mais f√°cil. Criar depend√™ncias entre commits √© vai causar muitas dores
        de cabe√ßa.
      </BlogParagraph>

      <CodeSnippet showLineNumbers={false} wrapLines>
        {`$ git add .
$ git commit -m "added fastify as dependency"`}
      </CodeSnippet>

      <BlogParagraph>
        Vou come√ßar criando um diret√≥rio <code>/app</code> na ra√≠z do projeto,
        nesse diret√≥rio vamos colocar o c√≥digo que tem valor direto ao neg√≥cio.
        Em outras palavras, o c√≥digo que representa a aplica√ß√£o vai ficar dentro
        dessa pasta <code>/app</code>.
      </BlogParagraph>

      <CodeSnippet showLineNumbers={false} wrapLines>
        $ mkdir /app
      </CodeSnippet>

      <BlogParagraph>
        Para evitar de deixar o projeto bagun√ßado, dentro desse diret√≥rio{' '}
        <code>/app</code>
        vou criar um novo diret√≥rio onde vou organizar os roteadores do projeto.
      </BlogParagraph>

      <CodeSnippet showLineNumbers={false} wrapLines>
        $ mkdir app/routers
      </CodeSnippet>

      <BlogParagraph>
        Dentro do diret√≥rio <code>app/routers</code> vou criar nosso roteador de
        usu√°rios:
      </BlogParagraph>

      <CodeSnippet showLineNumbers={false} wrapLines>
        $ touch app/routers/users-router.js
      </CodeSnippet>

      <BlogParagraph>
        Vou escrever o m√≠nimo necess√°rio pra dar uma estrutura b√°sica ao
        roteador:
      </BlogParagraph>

      <CodeSnippet>
        {`// app/routers/users-router.js

async function usersRouter(fastify) {
  fastify.get("/users", (req, reply) => {
    reply.send({ hello: "world" });
  });
}

module.exports = usersRouter;
`}
      </CodeSnippet>

      <BlogParagraph>
        N√£o conseguimos fazer muito com esse roteador, precisamos configurar um
        servidor m√≠nimo para conseguirmos fazer alguma requisi√ß√£o. Vou criar um
        arquivo em <code>app/server.js</code>. Seu conte√∫do √©:
      </BlogParagraph>

      <CodeSnippet>
        {`// app/server.js

const fastify = require("fastify")({ logger: true });

fastify.register(require("./routers/users-router"), {
  prefix: "/api/v1",
});

fastify.listen(3000, (err, addr) => {
  if (err) {
    fastify.log.error(err);
    process.exit(1);
  }
  fastify.log.info(\`server listening on $\{addr\}\`);
});`}
      </CodeSnippet>

      <BlogParagraph>
        Basicamente o que esse servidor faz: registra o roteador dos usu√°rios
        como um plugin do fastify e come√ßa a escutar por requisi√ß√µes na porta
        3000.
      </BlogParagraph>

      <BlogParagraph>Vamos colocar esse roteador pra funcionar:</BlogParagraph>

      <CodeSnippet showLineNumbers={false} wrapLines>
        {`$ node app/server.js 
{"level":30,"time":1608390038481,"pid":59629,"hostname":"tinhoso","msg":"Server listening at http://127.0.0.1:3000"}
{"level":30,"time":1608390038481,"pid":59629,"hostname":"tinhoso","msg":"server listening on http://127.0.0.1:3000"}`}
      </CodeSnippet>

      <BlogParagraph>
        Aparentemente temos sucesso! Em outra janela do terminal, vamos fazer
        uma requisi√ß√£o simples via curl e testar se o nosso servidor retorna
        corretamente:
      </BlogParagraph>

      <CodeSnippet showLineNumbers={false} wrapLines>
        {`{"hello":"world"}
$ curl localhost:3000/api/v1/users`}
      </CodeSnippet>

      <BlogParagraph>
        Note que quando registrei o plugin, atribu√≠ o prefixo{' '}
        <code>/api/v1</code> para as rotas daquele plugin. Nesse caso, o fastify
        vai montar aquela rota em
        <code>/api/v1/users</code>. N√£o quero entrar em mais detalhes sobre o
        Fastify para evitar deixar esse texto muito longo, mas saiba mais sobre
        esse excelente framework na{' '}
        <OuterLink href="https://www.fastify.io/docs/latest">
          documenta√ß√£o oficial
        </OuterLink>
        .
      </BlogParagraph>

      <BlogParagraph>
        Essa √© uma boa hora de criar um novo commit.
      </BlogParagraph>

      <BlogSubtitle>Lendo dados do Mongo</BlogSubtitle>

      <BlogParagraph>
        Agora vamos de fato come√ßar a configurar nosso projeto para usar o
        MongoDB com confian√ßa! Antes de tudo, vou criar um diret√≥rio chamado
        <code>db</code> e dentro desse diret√≥rio, vou criar um arquivo que vai
        expor uma fun√ß√£o para realizar a conex√£o com o Mongo.
      </BlogParagraph>

      <CodeSnippet showLineNumbers={false} wrapLines>
        {`$ mkdir db
$ touch db/mongo.js`}
      </CodeSnippet>

      <BlogParagraph>
        Dentro desse arquivo vou definir e exportar uma fun√ß√£o chamada
        <code>connect</code>. O trabalho dessa fun√ß√£o √© conectar com o Mongo e
        devolver uma inst√¢ncia da conex√£o com o banco de dados.
      </BlogParagraph>

      <CodeSnippet>
        {`// db/mongo.js

const { MongoClient } = require("mongodb");

const client = new MongoClient("mongodb://admin:admin@localhost:27017", {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

async function connect() {
  await client.connect();
  return client.db("demo-testing");
}

module.exports = { connect };`}
      </CodeSnippet>

      <BlogParagraph>
        Estou assumindo que voc√™ j√° tem um Mongo rodando com um usu√°rio chamado
        <code>admin</code> cuja senha √© <code>admin</code>. Se voc√™ n√£o tem, √©
        interessante usar o<code>docker-compose</code> pra subir uma inst√¢ncia
        do Mongo. Veja esse exemplo, que tamb√©m vou deixar no reposit√≥rio de
        exemplo:
      </BlogParagraph>

      <CodeSnippet showLineNumbers={false} wrapLines>
        $ touch docker-compose.yml
      </CodeSnippet>

      <BlogParagraph>
        E o arquivo YAML que descreve o servi√ßo do mongo:
      </BlogParagraph>

      <CodeSnippet>
        {`version: "3.7"

services:
  local_mongo:
    image: mongo
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin
      MONGO_INITDB_DATABASE: demo_testing
    ports:
      - 27017:27017
    volumes:
      - ./db_data:/data/db`}
      </CodeSnippet>

      <BlogParagraph>Para iniciar o servi√ßo do mongo:</BlogParagraph>

      <BlogParagraph>
        <code>$ docker-compose up -d</code>
      </BlogParagraph>

      <BlogParagraph>
        S√≥ para confirmar, veja se o servi√ßo est√° de fato rodando:
      </BlogParagraph>

      <CodeSnippet showLineNumbers={false} wrapLines>
        {`$ docker-compose ps
              Name                           Command             State            Ports          
-------------------------------------------------------------------------------------------------
node-mongo-testing_local_mongo_1   docker-entrypoint.sh mongod   Up      0.0.0.0:27017->27017/tcp`}
      </CodeSnippet>

      <BlogParagraph>
        Agora estamos prontos para conectar com o banco de dados! Vou come√ßar
        adicionando a leitura da cole√ß√£o de usu√°rios e retornando na rota
        <code>/api/v1/users</code>:
      </BlogParagraph>

      <CodeSnippet>
        {`// app/routers/users-router.js

const { connect } = require("../../db/mongo");

async function usersRouter(fastify) {
  const db = await connect();

  fastify.get("/users", async (req, reply) => {
    const users = await db.collection("users").find({}).toArray();
    reply.send(users);
  });
}

module.exports = usersRouter;`}
      </CodeSnippet>

      <BlogParagraph>
        Agora vamos fazer uma nova requisi√ß√£o nesse endpoint via curl e...
      </BlogParagraph>

      <CodeSnippet showLineNumbers={false} wrapLines>
        {`$ curl localhost:3000/api/v1/users
[]`}
      </CodeSnippet>

      <BlogParagraph>
        √â, retornou nada! E isso √© bom, n√≥s subimos uma nova vers√£o do mongo sem
        nenhum dado armazenado, seria muito, muito estranho se algum dado fosse
        retornado!
      </BlogParagraph>

      <BlogParagraph>
        Vamos come√ßar adicionando dados aleat√≥rios no banco antes de fazer a
        leitura:
      </BlogParagraph>

      <CodeSnippet>
        {`const { connect } = require("../../db/mongo");

async function usersRouter(fastify) {
  const db = await connect();

  await db.collection("users").deleteMany({});
  await db.collection("users").insertMany([
    { name: "Jo√£o", email: "joao@email.com" },
    { name: "Maria", email: "maria@email.com" },
  ]);

  fastify.get("/users", async (req, reply) => {
    const users = await db.collection("users").find({}).toArray();

    reply.send(users);
  });
}

module.exports = usersRouter;`}
      </CodeSnippet>

      <BlogParagraph>
        Note que eu primeiro deleto todos os registros na cole√ß√£o de usu√°rios
        antes de adicionar novos, isso vai evitar que voc√™ veja dados diferentes
        dos que estou mostrando aqui nesse texto.
      </BlogParagraph>

      <BlogParagraph>
        Fazendo novamente uma requisi√ß√£o GET via curl, temos o resultado
        esperado (n√£o esque√ßa de reiniciar o servidor):
      </BlogParagraph>

      <CodeSnippet showLineNumbers={false} wrapLines>
        {`$ curl localhost:3000/api/v1/users
[{"_id":"5fde1ca9391ce0f008b82059","name":"Jo√£o","email":"joao@email.com"},
{"_id":"5fde1ca9391ce0f008b8205a","name":"Maria","email":"maria@email.com"}]`}
      </CodeSnippet>

      <BlogParagraph>
        Fa√ßa um novo commit e vamos passar para a pr√≥xima etapa.
      </BlogParagraph>

      <BlogSubtitle>A primeria refatora√ß√£o</BlogSubtitle>

      <BlogParagraph>
        Bom, j√° temos uma estrutura que est√° gritando que precisa ser
        refatorada. Temos que ter alguma forma de popular o banco de dados no
        inicio do projeto. Aqui a ideia de <i>seeds</i> entra em jogo.
      </BlogParagraph>

      <BlogParagraph>
        Semear um banco de dados √© basicamente executar um script que vai
        popular o banco com dados padr√£o. √â um script que vai preparar o banco
        com todos os dados necess√°rios para come√ßarmos a desenvolver a nossa
        aplica√ß√£o.
      </BlogParagraph>

      <BlogParagraph>
        Pense que voc√™ √© um novo desenvolvedor(a) entrando em um time de
        tecnologia, seu primeiro trabalho √© configurar o seu computador com o
        ambiente de desenvolvimento desse novo time. Uma dessas etapas (se o
        time √© suficientemente profissional) √© semear o banco de dados com dados
        e geralmente esse processo √© feito ao executar um script.
      </BlogParagraph>

      <BlogParagraph>
        Esse script tem diversas formas diferentes. Se o projeto √© uma aplica√ß√£o
        Rails, provavelmente executar <code>rails db:seed</code> vai ser
        suficiente. Se o projeto √© uma aplica√ß√£o Go, os times geralmente
        costumam usar ferramentas unix que j√° existem pra realizar procedimentos
        automatizados, ent√£o provavelmente vai existir um <code>Makefile</code>{' '}
        no reposit√≥rio onde voc√™ vai precisar executar algo parecido com `make
        db_seed`.
      </BlogParagraph>

      <BlogParagraph>
        Esse projeto √© um projeto em Node, √© muito interessante se n√≥s
        conseguirmos de alguma forma, criar um script no arquivo{' '}
        <code>package.json</code>
        que vai cuidar do processo de semear o banco de dados. Vamos come√ßar
        pelo fim, qual tipo de API que n√≥s queremos?
      </BlogParagraph>

      <BlogSubtitle>Configurando o seeder</BlogSubtitle>

      <BlogParagraph>
        No <code>package.json</code> vamos adicionar dois scripts, um para
        iniciar a aplica√ß√£o automaticamente (algo que estamos fazendo ao invocar
        o node manualmente) e outro para semear o banco de dados:
      </BlogParagraph>

      <CodeSnippet>
        {`{
  "name": "node-mongo-testing",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "start": "node app/server.js",
    "db:seed": "node scripts/db/seed.js"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "dependencies": {
    "fastify": "^3.9.2",
    "mongodb": "^3.6.3"
  }
}`}
      </CodeSnippet>

      <BlogParagraph>
        Note que j√° estou causando um efeito colateral de cara: vamos precisar
        criar um arquivo <code>seed.js</code> no diret√≥rio{' '}
        <code>scripts/db</code>. Vamos fazer isso:
      </BlogParagraph>

      <CodeSnippet showLineNumbers={false} wrapLines>
        {`$ mkdir scripts
$ mkdir scripts/db
$ touch scripts/db/seed.js`}
      </CodeSnippet>

      <BlogParagraph>
        Dentro desse arquivo vamos usar o utilit√°rio de conex√£o com o Mongo que
        j√° haviamos criado:
      </BlogParagraph>

      <CodeSnippet>
        {`// scripts/db/seed.js

const { connect } = require("../../db/mongo");

async function run() {
  const db = await connect();

  const collections = await db.collections();
  for (const coll of collections) {
    await coll.deleteMany({});
    await coll.dropIndexes();
    await coll.drop();
  }

  // call the seeder with db instance
}

run()
  .then(() => {
    console.log("Seed done");
    process.exit(0);
  })
  .catch((err) => {
    console.log("Seed error:", err);
    process.exit(1);
  });`}
      </CodeSnippet>

      <BlogParagraph>
        Tem algumas coisas acontecendo aqui. Eu defini essa fun√ß√£o{' '}
        <code>run</code> que vai executar todo o c√≥digo preparat√≥rio que
        precisamos e ent√£o vai invocar o semeador (vou chamar de <i>seeder</i>{' '}
        daqui em diante).
      </BlogParagraph>

      <BlogParagraph>
        O c√≥digo preparat√≥rio √© basicamente ler todas as cole√ß√µes do banco de
        dados e deletar tudo que existe nessas cole√ß√µes, inclusive os √≠ndices
        criados e a cole√ß√£o em si. Resumindo, essa prepara√ß√£o vai deletar todo o
        banco de dados.
      </BlogParagraph>

      <BlogParagraph>
        Esse tipo de comportamento √© muito importante e essencial para o seeder
        funcionar com sucesso. O objetivo aqui √© preparar o banco de dados para
        come√ßar a ser usado, o banco de dados precisa partir do estado limpo.
      </BlogParagraph>

      <BlogParagraph>
        Em seguida eu deixei aquele coment√°rio indicando que, ap√≥s limpar o
        banco de dados, vamos chamar uma outra fun√ß√£o que faz o processo de
        semear o banco de dados. Vou criar essa fun√ß√£o dentro do m√≥dulo
        <code>seeder.js</code> que vou deixar no diret√≥rios <code>db</code>:
      </BlogParagraph>

      <CodeSnippet showLineNumbers={false} wrapLines>
        $ touch db/seeder.js
      </CodeSnippet>

      <BlogParagraph>
        Vou escrever o m√≠nimo poss√≠vel para ilustrar o que vai ser feito nesse
        m√≥dulo:
      </BlogParagraph>

      <CodeSnippet>
        {`// db/seeder.js

async function seed(db) {
  await db.collection("users").insertMany([
    { name: "Jo√£o", email: "joao@email.com" },
    { name: "Maria", email: "maria@email.com" },
  ]);
}

module.exports = { seed };`}
      </CodeSnippet>

      <BlogParagraph>
        Ainda faltam duas coisas: chamar essa fun√ß√£o no nosso script de
        automa√ß√£o e remover o trecho que adiciona dados no banco dentro do
        roteador. Embora n√£o seja trabalho do roteador de ter que lidar com o
        banco de dados, vamos manter aquele trecho de c√≥digo que l√™ os usu√°rios
        do banco dentro do callback, por enquanto.
      </BlogParagraph>

      <CodeSnippet>
        {`// scripts/db/seeder.js

const { connect } = require("../../db/mongo");
const { seed } = require("../../db/seeder");

async function run() {
  const db = await connect();

  const collections = await db.collections();
  for (const coll of collections) {
    await coll.deleteMany({});
    await coll.dropIndexes();
    await coll.drop();
  }

  await seed(db);
}

run()
  .then(() => {
    console.log("Seed done");
    process.exit(0);
  })
  .catch((err) => {
    console.log("Seed error:", err);
    process.exit(1);
  });`}
      </CodeSnippet>

      <CodeSnippet>
        {`// app/routers/users-router.js

const { connect } = require("../../db/mongo");

async function usersRouter(fastify) {
  const db = await connect();

  fastify.get("/users", async (req, reply) => {
    const users = await db.collection("users").find({}).toArray();

    reply.send(users);
  });
}

module.exports = usersRouter;`}
      </CodeSnippet>

      <BlogParagraph>
        Agora √© a hora da verdade, se voc√™ seguiu todos os passos basta rodar o
        seguinte comando no terminal e seu banco de dados estar√° pronto.
      </BlogParagraph>

      <CodeSnippet showLineNumbers={false} wrapLines>
        {`$ npm run db:seed

> node-mongo-testing@1.0.0 db:seed /home/gustavo/Workspace/blog-projects/node-mongo-testing
> node scripts/db/seed.js

Seed done`}
      </CodeSnippet>

      <BlogParagraph>
        Rodando o servidor novamente e acessando a rota{' '}
        <code>/api/v1/users</code> vemos que tudo segue funcionando como antes:
      </BlogParagraph>

      <CodeSnippet showLineNumbers={false} wrapLines>
        {`$ curl localhost:3000/api/v1/users
[{"_id":"5fde235d074ba3f2f5309b86","name":"Jo√£o","email":"joao@email.com"},{"_id":"5fde235d074ba3f2f5309b87","name":"Maria","email":"maria@email.com"}]`}
      </CodeSnippet>

      <BlogParagraph>
        Legal. Mas e se agora precisamos criar um novo usu√°rio chamado{' '}
        <code>Laura</code>
        no nosso banco sempre que inicializar o projeto? Basta alterar o arquivo
        <code>db/seeder.js</code>:
      </BlogParagraph>

      <CodeSnippet>
        {`// db/seeder.js

async function seed(db) {
  await db.collection("users").insertMany([
    { name: "Jo√£o", email: "joao@email.com" },
    { name: "Maria", email: "maria@email.com" },
    { name: "Laura", email: "laura@email.com" },
  ]);
}

module.exports = { seed };`}
      </CodeSnippet>

      <BlogParagraph>
        E agora rodar o script de automa√ß√£o do banco novamente:
      </BlogParagraph>

      <CodeSnippet showLineNumbers={false} wrapLines>
        {`$ npm run db:seed

> node-mongo-testing@1.0.0 db:seed /home/gustavo/Workspace/blog-projects/node-mongo-testing
> node scripts/db/seed.js

Seed done`}
      </CodeSnippet>

      <BlogParagraph>
        Sem reiniciar o servidor, se voc√™ fazer novamente a mesma requisi√ß√£o,
        ver√° que o usu√°rio que representa a Laura ser√° retornado:
      </BlogParagraph>

      <CodeSnippet showLineNumbers={false} wrapLines>
        {`$ curl localhost:3000/api/v1/users
[{"_id":"5fde247fb807daf3b999480d","name":"Jo√£o","email":"joao@email.com"},{"_id":"5fde247fb807daf3b999480e","name":"Maria","email":"maria@email.com"},{"_id":"5fde247fb807daf3b999480f","name":"Laura","email":"laura@email.com"}]`}
      </CodeSnippet>

      <BlogParagraph>
        Sejamos sinceros, est√° dificil de ler esse JSON n√£o formatado. Se voc√™
        usa Linux, basta instalar o utilit√°rio <code>jq</code> e direcionar a
        sa√≠da do
        <code>curl</code>:
      </BlogParagraph>

      <CodeSnippet showLineNumbers={false} wrapLines>
        {`$ curl localhost:3000/api/v1/users | jq
[
  {
    "_id": "5fde247fb807daf3b999480d",
    "name": "Jo√£o",
    "email": "joao@email.com"
  },
  {
    "_id": "5fde247fb807daf3b999480e",
    "name": "Maria",
    "email": "maria@email.com"
  },
  {
    "_id": "5fde247fb807daf3b999480f",
    "name": "Laura",
    "email": "laura@email.com"
  }
]`}
      </CodeSnippet>

      <BlogParagraph>
        Bem melhor, n√£o? Aproveitando, √© uma boa hora para fazer um novo commit.
      </BlogParagraph>

      <BlogSubtitle>Adicionando testes</BlogSubtitle>

      <BlogParagraph>
        Agora que temos um projeto minimamente configurado, est√° na hora de
        come√ßar a escrever os testes. Testes que envolvem o banco de dados n√£o
        deveriam ser mockados. Eu vejo muitos desenvolvedores criando dubl√™s
        (mocks) mirabolantes para o banco de dados. N√≥s podemos facilemten
        configurar automa√ß√µes para popular o banco sempre que os testes rodarem.
      </BlogParagraph>

      <BlogParagraph>
        Popular o banco de dados nos testes e usar o banco de dados durante os
        testes aproxima a nossa aplica√ß√£o do ambiente real onde ela ser√°
        executada em produ√ß√£o. Em produ√ß√£o um cliente n√£o vai fazer uma
        requisi√ß√£o e receber um retorno que veio de um mock, vai receber um
        retorno que partiu de um dado armazenado no banco de dados. Testar esse
        comportamento √© muito importante.
      </BlogParagraph>

      <BlogParagraph>
        Vamos come√ßar adicionando o jest no projeto:
      </BlogParagraph>

      <CodeSnippet
        showLineNumbers={false}
        wrapLines
      >{`$ npm i -D jest`}</CodeSnippet>

      <BlogParagraph>
        Agora vamos criar o arquivo de configura√ß√£o do jest. Esse arquivo vai
        indicar para o jest usar um arquivo de setup. Esse arquivo de setup vai
        cuidar das automa√ß√µes no banco de dados.
      </BlogParagraph>

      <CodeSnippet showLineNumbers={false} wrapLines>{`$ touch jest.config.js
$ touch jest.setup.js`}</CodeSnippet>

      <BlogParagraph>
        Em <code>jest.config.js</code> vou definir para o jest carregar o
        arquivo
        <code>jest.setup.js</code> sempre que configurar o ambiente de testes:
      </BlogParagraph>

      <CodeSnippet>
        {`// jest.config.js

module.exports = {
  setupFilesAfterEnv: ["./jest.setup.js"],
};`}
      </CodeSnippet>

      <BlogParagraph>
        Vou deixar o arquivo <code>jest.setup.js</code> vazio por enquanto. Vou
        criar tamb√©m um script no <code>package.json</code> para rodar o jest
        automaticamente no modo <i>watch</i>:
      </BlogParagraph>

      <CodeSnippet>{`{
  "name": "node-mongo-testing",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "start": "node app/server.js",
    "test": "jest",
    "test:watch": "jest --watch",
    "db:seed": "node scripts/db/seed.js"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "dependencies": {
    "fastify": "^3.9.2",
    "mongodb": "^3.6.3"
  },
  "devDependencies": {
    "jest": "^26.6.3"
  }
}`}</CodeSnippet>

      <BlogSubtitle>Criando o primeiro teste</BlogSubtitle>

      <BlogParagraph>
        Por padr√£o, o jest procuta por arquivos com a extens√£o{' '}
        <code>*.test.js</code>. Onde voc√™ vai deixar os testes depende do seu
        gosto pessoal e dos padr√µes adotados no projeto em que voc√™ est√°
        trabalhando. Aqui vou come√ßar escrevendo um teste para um arquivo que
        nem ao menos existe ainda:
      </BlogParagraph>

      <CodeSnippet showLineNumbers={false} wrapLines>{`$ mkdir app/services
$ touch app/services/user-service.test.js`}</CodeSnippet>

      <BlogParagraph>
        Vou escrever o m√≠nimo necess√°rio para o jest idenficar e executar os
        testes nesse arquivo:
      </BlogParagraph>

      <CodeSnippet>{`// app/services/user-service.test.js

const { UserService } = require("./user-service");

describe(UserService.name, () => {
  test.todo("should list all users");
});`}</CodeSnippet>

      <BlogParagraph>
        Se rodarmos o jest, claramente vamos receber um erro:
      </BlogParagraph>

      <CodeSnippet showLineNumbers={false} wrapLines>{`$ npm run test       
> node-mongo-testing@1.0.0 test /home/gustavo/Workspace/blog-projects/node-mongo-testing                                            
> jest

 FAIL  app/services/user-service.test.js
  ‚óè Test suite failed to run

    Cannot find module './user-service' from 'app/services/user-service.test.js'`}</CodeSnippet>

      <BlogParagraph>
        √â √≥bvio que isso iria acontecer, por√©m sabemos que precisamos criar um
        m√≥dulo em <code>app/services/user-service.js</code> e esse m√≥dulo deve
        exportar alguma coisa chamada <code>UserService</code>, por√©m essa coisa
        precisa ter a propriedade <code>name</code> e <code>name</code> deve ser
        uma <code>string</code>.
      </BlogParagraph>

      <BlogParagraph>
        Com todas essas informa√ß√µes em mente, vamos escrever o m√≠nimo nesse
        m√≥dulo para fazer o jest executar sem erros:
      </BlogParagraph>

      <CodeSnippet>{`// app/services/user-service.js

class UserService {}

module.exports = { UserService };`}</CodeSnippet>

      <BlogParagraph>Se rodarmos a su√≠te de testes novamente:</BlogParagraph>

      <CodeSnippet showLineNumbers={false} wrapLines>{`$ npm run test

> node-mongo-testing@1.0.0 test /home/gustavo/Workspace/blog-projects/node-mongo-testing
> jest

 PASS  app/services/user-service.test.js
  UserService
    ‚úé todo should list all users

Test Suites: 1 passed, 1 total
Tests:       1 todo, 1 total
Snapshots:   0 total
Time:        1.207 s
Ran all test suites.`}</CodeSnippet>

      <BlogParagraph>
        √ìtimo! Mas espere um segundo: temos um teste que na verdade faz nada,
        vamos implementar o que esperamos que a classe <code>UserService</code>{' '}
        entregue via API:
      </BlogParagraph>

      <CodeSnippet>{`// app/services/user-service.test.js

const { UserService } = require("./user-service");

describe(UserService.name, () => {
  test("should list all users", async () => {
    const userService = new UserService();
    await userService.connect();

    const allUsers = await userService.listAll();

    expect(allUsers.length).toBe(3);
  });
});`}</CodeSnippet>

      <BlogParagraph>
        Agora sabemos que <code>UserService</code> espera ser uma classe que
        quando instanciada vai oferecer um m√©todo ass√≠ncrono{' '}
        <code>connect</code> e um m√©todo ass√≠ncrono <code>listAll</code>. Al√©m
        disso, esperamos que o m√©todo <code>listAll</code>
        resolva para uma lista com tr√™s elementos!
      </BlogParagraph>

      <BlogParagraph>
        Se voc√™ juntar os pauzinhos, ver√° que nosso seeder insere tr√™s usu√°rios
        no banco de dados, ent√£o partindo do princ√≠pio de que o banco estar√°
        semeado antes de rodar os testes, √© razo√°vel esperar que tr√™s usu√°rios
        ser√£o retornados atrav√©s do m√©todo <code>listAll</code>. Vamos
        implementar esses m√©todos:
      </BlogParagraph>

      <CodeSnippet>{`// app/services/user-service.js

const { connect } = require("../../db/mongo");

class UserService {
  constructor() {
    this._db = undefined;
  }

  async connect() {
    this._db = await connect();
  }

  listAll() {
    return this._db.collection("users").find().toArray();
  }
}

module.exports = { UserService };`}</CodeSnippet>

      <BlogParagraph>
        N√£o estou preocupado com a devida abstra√ß√£o e o quanto esse c√≥digo √©
        DRY. O objetivo aqui √© criar uma su√≠te de testes com confian√ßa e com o
        mongo devidamente configurado!
      </BlogParagraph>

      <BlogParagraph>
        Se voc√™ rodar os testes novamente, notar√° que passar√£o, mas o jest vai
        informar um aviso:
      </BlogParagraph>

      <CodeSnippet
        showLineNumbers={false}
        wrapLines
      >{`Jest did not exit one second after the test run has completed.

This usually means that there are asynchronous operations that weren't stopped in your tests. Consider running Jest with \`--detectOpenHandles\` to troubleshoot this issue.`}</CodeSnippet>

      <BlogParagraph>
        Isso aconteceu porque iniciamos uma conex√£o com o banco mas n√£o
        fechamos. Vou expor uma fun√ß√£o <code>disconnect</code> do m√≥dulo{' '}
        <code>mongo.js</code>
        (db/mongo.js) e usar essa fun√ß√£o para desconectar do mongo ap√≥s todos os
        testes serem executados:
      </BlogParagraph>

      <CodeSnippet>{`// db/mongo.js

const { MongoClient } = require("mongodb");

const client = new MongoClient("mongodb://admin:admin@localhost:27017", {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

async function connect() {
  await client.connect();
  return client.db("demo-testing");
}

async function disconnect() {
  await client.close();
}

module.exports = { connect, disconnect };`}</CodeSnippet>

      <BlogParagraph>
        E agora no arquivo <code>jest.setup.js</code>:
      </BlogParagraph>

      <CodeSnippet>{`// jest.setup.js

const { disconnect } = require("./db/mongo");

afterAll(async () => {
  await disconnect();
});`}</CodeSnippet>

      <BlogParagraph>
        Se rodarmos os testes novamente, veremos que obtemos sucesso e que o
        jest n√£o acusa nenhum novo problema.
      </BlogParagraph>

      <CodeSnippet showLineNumbers={false} wrapLines>{`$ npm run test

> node-mongo-testing@1.0.0 test /home/gustavo/Workspace/blog-projects/node-mongo-testing
> jest

 PASS  app/services/user-service.test.js
  UserService
    ‚úì should list all users (58 ms)

Test Suites: 1 passed, 1 total
Tests:       1 passed, 1 total
Snapshots:   0 total
Time:        1.538 s
Ran all test suites.`}</CodeSnippet>

      <BlogSubtitle>O problema do acoplamento</BlogSubtitle>

      <BlogParagraph>
        N√£o sei se voc√™ notou, mas criamos um forte acoplamento com o seeder.
        Toda vez que for necess√°rio adicionar um novo usu√°rio no seeder, teremos
        que alterar os nossos testes. N√£o est√° satisfeito com esse argumento?
        Vamos adicionar o usu√°rio M√°rio no seeder:
      </BlogParagraph>

      <CodeSnippet>{`// db/seeder.js

async function seed(db) {
  await db.collection("users").insertMany([
    { name: "Jo√£o", email: "joao@email.com" },
    { name: "Maria", email: "maria@email.com" },
    { name: "Laura", email: "laura@email.com" },
    { name: "Mario", email: "mario@email.com" },
  ]);
}

module.exports = { seed };`}</CodeSnippet>

      <BlogParagraph>
        Se rodarmos o script de automa√ß√£o do banco e os testes logo em seguida:
      </BlogParagraph>

      <CodeSnippet showLineNumbers={false} wrapLines>{`$ npm run db:seed

> node-mongo-testing@1.0.0 db:seed /home/gustavo/Workspace/blog-projects/node-mongo-testing                                         
> node scripts/db/seed.js

Seed done

$ npm run test

> node-mongo-testing@1.0.0 test /home/gustavo/Workspace/blog-projects/node-mongo-testing
> jest

 FAIL  app/services/user-service.test.js
  UserService
    ‚úï should list all users (63 ms)

  ‚óè UserService ‚Ä∫ should list all users

    expect(received).toBe(expected) // Object.is equality

    Expected: 3
    Received: 4

       8 |     const allUsers = await userService.listAll();
       9 | 
    > 10 |     expect(allUsers.length).toBe(3);
         |                             ^
      11 |   });
      12 | });
      13 | 

      at Object.<anonymous> (app/services/user-service.test.js:10:29)`}</CodeSnippet>

      <BlogParagraph>
        Esse tipo de coisa n√£o √© legal, concorda? N√≥s n√£o podemos acoplar os
        nossos testes com o estado eventual do banco de dados. Precisamos de
        testes preditivos e para isso, precisamos preparar o nosso banco de
        dados em cada teste.
      </BlogParagraph>

      <BlogParagraph>
        N√£o se assuste com esse tipo de coisa, grandes frameworks j√° fazem isso
        faz muito tempo.
      </BlogParagraph>

      <BlogSubtitle>Fixtures e mais automa√ß√£o</BlogSubtitle>

      <BlogParagraph>
        O que precisamos fazer √© preparar uma automa√ß√£o para limpar e inserir
        dados no banco toda vez que um determinado teste for executado. N√£o
        estou falando do callback que o <code>describe</code> recebe, mas sim os
        callbacks que as fun√ß√µes <code>it</code> e <code>test</code> recebem.
        Precisamos preparar o banco de dados sempre antes de executar essas
        fun√ß√µes.
      </BlogParagraph>

      <BlogParagraph>
        Esse processo envolve deletar todos os dados no banco de dados e inserir
        novamente.
      </BlogParagraph>

      <BlogParagraph>
        Voc√™ deve estar se perguntando: vamos inserir dados no banco onde? De
        onde v√£o vir esses dados?
      </BlogParagraph>

      <BlogParagraph>
        Muitos frameworks fazem o processo de ler fixtures e salvar no banco de
        forma automatizada, t√£o automatizada que parece m√°gica, por√©m √© uma
        m√°gica que aumenta muito a produtividade do desenvolvedor. O que vamos
        fazer aqui envolve menos m√°gica, mas ser√° o suficiente para que voc√™
        entenda o procedimento.
      </BlogParagraph>

      <BlogParagraph>
        Vou come√ßar criando um diret√≥rio chamado <code>tests/fixtures</code>:
      </BlogParagraph>

      <CodeSnippet
        showLineNumbers={false}
        wrapLines
      >{`$ mkdir -p tests/fixtures`}</CodeSnippet>

      <BlogParagraph>
        Dentro desse diret√≥rio vou criar um arquivo JavaScript com alguns
        usu√°rios:
      </BlogParagraph>

      <CodeSnippet>{`// tests/fixtures/users.js

const ana = { name: "Ana", email: "ana@email.com" };
const roberto = { name: "Roberto", email: "roberto@email.com" };

module.ana = ana;
module.roberto = roberto;
module.exports = [ana, roberto];`}</CodeSnippet>

      <BlogParagraph>
        Em <code>jest.setup.js</code> vou declarar no hook{' '}
        <code>beforeEach</code> instru√ß√µes para zerar o banco de dados e inserir
        os usu√°rios na cole√ß√£o de, ...usu√°rios.
      </BlogParagraph>

      <CodeSnippet>{`// jest.setup.js

const { disconnect, connect } = require("./db/mongo");
const users = require("./tests/fixtures/users");

beforeEach(async () => {
  const db = await connect();
  const collections = await db.collections();
  for (const coll of collections) {
    await coll.deleteMany();
  }

  await db.collection("users").insertMany(users);
});

afterAll(async () => {
  await disconnect();
});`}</CodeSnippet>

      <BlogParagraph>
        Se rodarmos os testes novamente, voc√™ ver√° que ir√£o falhar, por√©m note a
        falha:
      </BlogParagraph>

      <CodeSnippet
        showLineNumbers={false}
        wrapLines
      >{` FAIL  app/services/user-service.test.js
 UserService
    ‚úï should list all users (106 ms)
                      
  ‚óè UserService ‚Ä∫ should list all users

    expect(received).toBe(expected) // Object.is equality
    
    Expected: 3
    Received: 2 `}</CodeSnippet>

      <BlogParagraph>
        A falha indica que era esperado um array com tres usu√°rios, mas foi
        retornado um array com dois usu√°rios, os exatos dois que inserimos no
        banco via fixtures! Mas al√©m disso, o driver do mongo acusou diversos
        erros. Isso aconteceu porque estamos criando uma nova conex√£o sempre e
        isso √© um problema. Podemos, em todos os testes, criar novas conex√µes ou
        reutilizar a conex√£o existente. Vou modificar o nosso utilit√°rio para
        reutilizar a conex√£o com o banco de dados:
      </BlogParagraph>

      <CodeSnippet>{`// db/mongo.js

const { MongoClient } = require("mongodb");

const client = new MongoClient("mongodb://admin:admin@localhost:27017", {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

let connected = false;

async function connect() {
  if (connected) return client.db("demo-testing");

  await client.connect();
  connected = true;

  return connect();
}

async function disconnect() {
  await client.close();
}

module.exports = { connect, disconnect };`}</CodeSnippet>

      <BlogParagraph>
        Assim, sempre que uma nova conex√£o for necess√°ria, a fun√ß√£o connect vai
        checar se j√° existe uma conex√£o pronta, caso exista, essa conex√£o ser√°
        devolvida. Existem problemas relacionados com essa abordagem, √© uma
        abordagem realmente bem simples, mas fazer algo mais robusto faria esse
        artigo ser ainda mais longo.
      </BlogParagraph>

      <BlogParagraph>
        Agora vamos nos voltar aos testes. Podemos alterar os nossos fixtures e
        criar um novo usu√°rio ou alterar o teste e esperar que dois usu√°rios
        sejam retornados. Vou modificar o fixture e adicionar um novo usu√°rio:
      </BlogParagraph>

      <CodeSnippet>{`// tests/fixtures/users.js

const ana = { name: "Ana", email: "ana@email.com" };
const roberto = { name: "Roberto", email: "roberto@email.com" };
const claudio = { name: "Claudio", email: "claudio@email.com" };

module.ana = ana;
module.roberto = roberto;
module.claudio = claudio;
module.exports = [ana, roberto, claudio];`}</CodeSnippet>

      <BlogParagraph>
        Se rodarmos os testes novamente, veremos que temos sucesso.
      </BlogParagraph>

      <CodeSnippet>{` PASS  app/services/user-service.test.js
  UserService
    ‚úì should list all users (67 ms)

Test Suites: 1 passed, 1 total
Tests:       1 passed, 1 total
Snapshots:   0 total
Time:        1.535 s
Ran all test suites.`}</CodeSnippet>

      <BlogSubtitle>Novo acoplamento, nova refatora√ß√£o</BlogSubtitle>

      <BlogParagraph>
        Notou que o nosso roteador ainda est√° acessando o banco? Vamos resolver
        esse problema:
      </BlogParagraph>

      <CodeSnippet>{`// app/routers/users-router.js

const { UserService } = require("../services/user-service");

async function usersRouter(fastify) {
  const userService = new UserService();
  await userService.connect();

  fastify.get("/users", async (req, reply) => {
    const users = await userService.listAll();
    reply.send(users);
  });
}

module.exports = usersRouter;`}</CodeSnippet>

      <BlogParagraph>
        Se voc√™ reiniciar o servidor e fizer uma nova requisi√ß√£o, ver√° que o
        servi√ßo ainda segue retornando o Jo√£o, a Maria e a Laura... Ops, parece
        que n√£o!
      </BlogParagraph>

      <CodeSnippet
        showLineNumbers={false}
        wrapLines
      >{`$ curl localhost:3000/api/v1/users | jq
[
  {
    "_id": "5fde45132bbcca053895bb47",
    "name": "Ana",
    "email": "ana@email.com"
  },
  {
    "_id": "5fde45132bbcca053895bb48",
    "name": "Roberto",
    "email": "roberto@email.com"
  },
  {
    "_id": "5fde45132bbcca053895bb49",
    "name": "Claudio",
    "email": "claudio@email.com"
  }
]`}</CodeSnippet>

      <BlogParagraph>
        O que a Ana, o Roberto e o Claudio est√£o fazendo aqui? Bom, o nosso
        teste usa o mesmo banco de desenvolvimento. Ainda temos um acoplamento,
        agora entre ambientes de execu√ß√£o da nossa aplica√ß√£o. Vamos resolver
        esse problema com vari√°veis de ambiente!
      </BlogParagraph>

      <BlogParagraph>
        Eu gosto bastante do pacote <code>dotenv</code>. Esse pacote existe em
        quase todos gerenciadores de pacote das linguagens de programa√ß√£o. Vou
        usar esse pacote pra carregar vari√°veis de ambiente diferentes entre os
        ambientes. Ou seja, vou definir um banco de dados para ser usado durante
        os testes e um banco de dados para ser usado durante o desenvolvimento.
      </BlogParagraph>

      <CodeSnippet
        showLineNumbers={false}
        wrapLines
      >{`$ npm i -D dotenv`}</CodeSnippet>

      <BlogParagraph>
        Agora vou criar dois novos arquivos <code>.env.local</code> e{' '}
        <code>.env.test</code>. N√£o esque√ßa de adicionar esses arquivos no{' '}
        <code>.gitignore</code>. Nesse momento n√£o √© exatamente ignorar esses
        arquivos, mas a partir do momento que voc√™ quiser fazer testes usando
        credenciais de produ√ß√£o, voc√™ vai precisar dar aten√ß√£o em dobro para
        esses arquivos que n√£o deveriam merecer qualquer tipo de aten√ß√£o
        especial.
      </BlogParagraph>

      <BlogParagraph>
        Para evitar eventuais dores de cabe√ßa, ignore esses dois arquivos e crie
        um novo, chamado <code>.env.example</code>. Nesse arquivo voc√™ vai
        definir as vari√°veis que precisam ser definidas por outras pessoas que
        queiram dar manuten√ß√£o nesse projeto.
      </BlogParagraph>

      <CodeSnippet showLineNumbers={false} wrapLines>{`# .env.example

MONGO_URI=
MONGO_DATABASE=`}</CodeSnippet>

      <BlogParagraph>
        J√° no arquivo <code>.env.local</code>, vou definir as vari√°veis
        referentes ao meu banco de desenvolvimento:
      </BlogParagraph>

      <CodeSnippet
        showLineNumbers={false}
        wrapLines
      >{`MONGO_URI="mongodb://admin:admin@localhost:27017"
MONGO_DATABASE=demo-testing`}</CodeSnippet>

      <BlogParagraph>
        E no <code>.env.test</code>, vou definir as mesmas vari√°veis, por√©m com
        os valores relacionados ao meu ambiente de teste:
      </BlogParagraph>

      <CodeSnippet
        showLineNumbers={false}
        wrapLines
      >{`MONGO_URI="mongodb://admin:admin@localhost:27017"
MONGO_DATABASE=demo-testing_test`}</CodeSnippet>

      <BlogParagraph>
        Note que estou usando a mesma inst√¢ncia do banco de dados, por√©m bancos
        de dados diferentes.
      </BlogParagraph>

      <BlogParagraph>
        Agora precisamos instruir o <code>dotenv</code> a carregar as vari√°veis
        de ambiente a partir dos arquivos corretos, vou come√ßar pelo ambiente de
        teste. O melhor local para invocar o <code>dotenv</code> √© no arquivo de
        <i>setup</i>, o<code>jest.setup.js</code>. Esse arquivo ser√° carregado
        sempre pelo jest, j√° que n√≥s configuramos esse comportamento.
      </BlogParagraph>

      <CodeSnippet>{`// jest.setup.js

const dotenv = require("dotenv");
dotenv.config({ path: ".env.test" });

const { disconnect, connect } = require("./db/mongo");
const users = require("./tests/fixtures/users");

beforeEach(async () => {
  const db = await connect();
  const collections = await db.collections();
  for (const coll of collections) {
    await coll.deleteMany();
  }

  await db.collection("users").insertMany(users);
});

afterAll(async () => {
  await disconnect();
});`}</CodeSnippet>

      <BlogParagraph>
        Note que eu invoquei o <code>dotenv</code> nas primeiras linhas desse
        m√≥dulo. √â importante invocar o dotenv antes de qualquer uso das
        vari√°veis de ambiente. Falando em vari√°veis de ambiente, precisamos
        alterar o m√≥dulo
        <code>db/mongo.js</code> para consumir o valor das vari√°veis de ambiente
        ao inv√©s de declarar a url de conex√£o e o nome do banco de dados de
        forma est√°tica.
      </BlogParagraph>

      <CodeSnippet>{`// db/mongo.js

const { MongoClient } = require("mongodb");

const client = new MongoClient(process.env.MONGO_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

let connected = false;

async function connect() {
  if (connected) return client.db(process.env.MONGO_DATABASE);

  await client.connect();
  connected = true;

  return connect();
}

async function disconnect() {
  await client.close();
}

module.exports = { connect, disconnect };`}</CodeSnippet>

      <BlogParagraph>Feito isso, vou rodar os testes e...</BlogParagraph>

      <CodeSnippet
        showLineNumbers={false}
        wrapLines
      >{` PASS  app/services/user-service.test.js
  UserService
    ‚úì should list all users (129 ms)

Test Suites: 1 passed, 1 total
Tests:       1 passed, 1 total
Snapshots:   0 total
Time:        1.612 s
Ran all test suites.`}</CodeSnippet>

      <BlogParagraph>Sucesso!</BlogParagraph>

      <BlogParagraph>
        Antes de prosseguirmos, precisamos invocar o dotenv tamb√©m para ler o
        arquivo com as vari√°veis de ambiente de desenvolvimento. Nesse momento
        precisamos nos preocupar com a natureza cheia de efeitos colaterais do
        dotenv.
      </BlogParagraph>

      <BlogParagraph>
        Voc√™ precisa conhecer a forma que sua aplica√ß√£o √© <i>parseada</i>, sen√£o
        voc√™ vai se encontrar em meio a v√°rios problemas bem dif√≠ceis de
        debugar. Essa aplica√ß√£o que estamos construindo depende de vari√°veis de
        ambiente definidas. N√≥s usamos o dotenv para definir essas vari√°veis
        automaticamente.
      </BlogParagraph>

      <BlogParagraph>
        Se por algum motivo voc√™ chamar o dotenv novamente ap√≥s ele j√° ter sido
        invocado, por√©m passando um arquivo de defini√ß√£o de vari√°veis de
        ambiente diferente, o dotenv vai sobrescrever as vari√°veis j√° definidas
        e o restante do programa, ap√≥s a execu√ß√£o da linha que redefine as
        vari√°veis de ambiente, vai consumir outras vari√°veis de ambiente.
      </BlogParagraph>

      <BlogParagraph>
        Uma forma r√°pida e segura de resolver esse problema √© chamar o dotenv no
        script que inicializa o nosso servidor:
      </BlogParagraph>

      <CodeSnippet>{`{
  "name": "node-mongo-testing",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "start": "node -r dotenv/config app/server.js dotenv_config_path=./.env.local",
    "test": "jest",
    "test:watch": "jest --watch",
    "db:seed": "node -r dotenv/config scripts/db/seed.js dotenv_config_path=./.env.local"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "dependencies": {
    "fastify": "^3.9.2",
    "mongodb": "^3.6.3"
  },
  "devDependencies": {
    "dotenv": "^8.2.0",
    "jest": "^26.6.3"
  }
}`}</CodeSnippet>

      <BlogParagraph>
        Feche o servidor, execute o seeder e inicie o servidor novamente. Ao
        fazer uma nova requisi√ß√£o a <code>/api/v1/users</code>, obtemos o
        resultado esperado:
      </BlogParagraph>

      <CodeSnippet
        showLineNumbers={false}
        wrapLines
      >{`$ curl localhost:3000/api/v1/users | jq
[
  {
    "_id": "5fde4d1133647a0b7b031d2d",
    "name": "Jo√£o",
    "email": "joao@email.com"
  },
  {
    "_id": "5fde4d1133647a0b7b031d2e",
    "name": "Maria",
    "email": "maria@email.com"
  },
  {
    "_id": "5fde4d1133647a0b7b031d2f",
    "name": "Laura",
    "email": "laura@email.com"
  }
]`}</CodeSnippet>

      <BlogParagraph>
        Legal! Se voc√™ quiser examinar o banco de dados, pode fazer isso atrav√©s
        do Mongo Shell:
      </BlogParagraph>

      <CodeSnippet
        showLineNumbers={false}
        wrapLines
      >{`> db.adminCommand({ listDatabases: 1})
{
        "databases" : [
                {
                        "name" : "admin",
                        "sizeOnDisk" : 163840,
                        "empty" : false
                },
                {
                        "name" : "config",
                        "sizeOnDisk" : 110592,
                        "empty" : false
                },
                {
                        "name" : "demo-testing",
                        "sizeOnDisk" : 40960,
                        "empty" : false
                },
                {
                        "name" : "demo-testing_test",
                        "sizeOnDisk" : 40960,
                        "empty" : false
                },
                {
                        "name" : "local",
                        "sizeOnDisk" : 73728,
                        "empty" : false
                }
        ],
        "totalSize" : 430080,
        "ok" : 1
}`}</CodeSnippet>

      <BlogParagraph>
        Ambos os bancos de dados existem! Se voc√™ quiser listar os dados em cada
        banco de dados, basta usar a clausula <code>{`use <db bame>`}</code> do
        mongo e inspecionar cada cole√ß√£o e documento. Se voc√™ inspecionar o
        suficiente, ver√° que os nossos testes deixam vest√≠gios no banco de dados
        e isso √© ruim. N√£o √© algo que vai prejudicar os testes, porque sempre
        que um teste executar o banco de dados ser√° zerado. Por√©m √© uma
        conven√ß√£o boa deixar o banco de dados limpo.
      </BlogParagraph>

      <BlogParagraph>
        Vou alterar o arquivo <code>jest.setup.js</code> para limpar o banco de
        dados ap√≥s todos os testes serem executados.
      </BlogParagraph>

      <CodeSnippet>{`// jest.setup.js

const dotenv = require("dotenv");
dotenv.config({ path: ".env.test" });

const { disconnect, connect } = require("./db/mongo");
const users = require("./tests/fixtures/users");

let db;
beforeAll(async () => {
  db = await connect();
});

beforeEach(async () => {
  const collections = await db.collections();
  for (const coll of collections) {
    await coll.deleteMany();
  }

  await db.collection("users").insertMany(users);
});

afterAll(async () => {
  const collections = await db.collections();
  for (const coll of collections) {
    await coll.deleteMany();
    await coll.dropIndexes();
    await coll.drop();
  }

  await disconnect();
});`}</CodeSnippet>

      <BlogParagraph>
        Aproveitei e fiz uma pequena modifica√ß√£o nesse arquivo para reutilizar
        uma inst√¢ncia do banco de dados, assim fica mais f√°cil realizar essas
        opera√ß√µes "sujas" em cima de uma s√≥ inst√¢ncia.
      </BlogParagraph>

      <BlogSubtitle>O fechamento</BlogSubtitle>

      <BlogParagraph>
        √â muito importante rodar os testes sempre! Seu time agradece e o seu
        "eu" do futuro tamb√©m agradece. Por√©m √© importante que seus pares
        saibam, em tempo de <i>code review</i> que o seu c√≥digo n√£o introduziu
        nenhum bug que quebre os testes.
      </BlogParagraph>

      <BlogParagraph>
        Confian√ßa √© importante, mas mais que isso, automa√ß√µes que garantem a
        integridade de uma base de c√≥digo √© ainda mais importante.
      </BlogParagraph>

      <BlogParagraph>
        Vamos come√ßar integrando esse projeto com o GitHub Actions. Vamos
        escrever um pequeno workflow para rodar os testes sempre que uma pull
        request for aberta no reposit√≥rio. Para isso vou trabalhar em outro
        branch.
      </BlogParagraph>

      <CodeSnippet
        showLineNumbers={false}
        wrapLines
      >{`$ git checkout -b feature/gh-actions-setup
$ mkdir -p .github/workflows
$ touch .github/workflows/test.yml`}</CodeSnippet>

      <BlogParagraph>
        Nesse workflow vou definir que a aplica√ß√£o precisa de uma inst√¢ncia do
        banco de dados e vou juntar as partes para rodar os nossos testes sempre
        que uma pull request for criada.
      </BlogParagraph>

      <CodeSnippet wrapLines>
        {`name: Tests

on:
  pull_request

env:
  NODE_ENV: test
    
jobs:
  test:
    runs-on: ubuntu-latest

    services:
      mongo:
        image: mongo:4.4
        ports:
          - 27017:27017
    
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: '14.x'

      - name: Install dependencies
        run: npm i

      - name: Run tests
        run: npm run test
        env:
          MONGO_URI: mongodb://127.0.0.1:27017
          MONGO_DATABASE: demo-testing
  `}
      </CodeSnippet>

      <BlogParagraph>
        Fa√ßo commit e um push. Agora no GitHub vou criar uma nova pull request e
        voc√™ vai poder acessar nesse link:{' '}
        <OuterLink href="https://github.com/gustavofsantos/node-mongo-testing/pull/1/checks">
          https://github.com/gustavofsantos/node-mongo-testing/pull/1/checks
        </OuterLink>
        .
      </BlogParagraph>

      <BlogSubtitle>Conclus√£o</BlogSubtitle>

      <BlogParagraph>
        Chega ao fim a nossa jornada de testes. Criamos algumas automa√ß√µes bem
        interessantes, al√©m disso discutimos assuntos importantes sobre
        organiza√ß√£o e integridade da base de c√≥digo.
      </BlogParagraph>

      <BlogParagraph>
        Espero que, al√©m de voc√™ ter gostado, que voc√™ tenha aprendido uma ou
        outra coisa, se esse for o caso, me d√™ um al√¥ nas redes sociais, vou
        ficar muito contente em saber que consegui ajudar algu√©m!
      </BlogParagraph>
    </BlogPage>
  )
}
